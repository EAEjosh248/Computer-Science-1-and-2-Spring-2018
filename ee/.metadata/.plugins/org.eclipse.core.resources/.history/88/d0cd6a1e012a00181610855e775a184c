

public class SortedDoubleLinkedList <T> extends BasicDoubleLinkedList<T> {

	public SortedDoubleLinkedList(java.util.Comparator<T> comparator2) {
		// TODO Auto-generated constructor stub
	}

	public void add(T elem) {
		 if (o == null) {
		      return;
		    }

		    Node newnode = new Node(elem,null,null);
		    if (header == null) {
		      // The list was empty
		    	header = itsTail = new ListNode(o);
		    } else {
		      // Check if it needs to go right at the head
		      if (itsComparator.compare(o, header.item) <= 0) {
		        newnode.next = header;
		        header = newnode;
		      }
		      // Check if it needs to go right at the tail
		      else if (itsComparator.compare(o, tail.data) >= 0) {
		        itsTail.next = newnode;
		        itsTail = newnode;
		      } else {
		        // It needs to be inserted into the middle of the list
		        ListNode next = itsHead.next;
		        ListNode prev = itsHead;
		        while (itsComparator.compare(o, next.data) > 0) {
		          prev = next;
		          next = next.next;
		        }
		        // Do the actual insertion
		        prev.next = newnode;
		        newnode.next = next;
		      }
		    }
		    itsSize++;		
	}
	@Override
	public void addToEnd(T data) {
		throw new UnsupportedOperationException();
	}
@Override
public void addToFront(T data)  {
	throw new UnsupportedOperationException();
}

public SortedDoubleLinkedList<T> remove(T data, java.util.Comparator<T> comparator){
			
	
	return this;
	
}

}
