import java.util.ArrayList;
import java.util.ListIterator;

import Linklist.LinkedList.Node;


public class BasicDoubleLinkedList <T> {
	int size =0;
	Node header,last,first;
	public void addToEnd(T elem) {
		size++;
		// TODO Auto-generated method stub
		
	}
	public void addToFront(T elem) {
		
		Node n = new Node();
		if(n != null) {// out of memory
			n.next = header.next;
			header.next = n;
			n.item = (T)elem;	
			size++;}
	
		
	}


	public int getSize() {
		// TODO Auto-generated method stub
		return size;
	}

	public T getLast() {
		// TODO Auto-generated method stub
		return last.item;
	}

	public T getFirst() {
		// TODO Auto-generated method stub
		return first.item;
	}

	
	public ListIterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	public void remove(T elem,  java.util.Comparator<T> comparator) {
		// TODO Auto-generated method stub
		
	}



	public Object retrieveFirstElement() {
		size--;
		// TODO Auto-generated method stub
		return null;
	}

	public Object retrieveLastElement() {
		size--;
		// TODO Auto-generated method stub
		return null;
	}

	public ArrayList<String> toArrayList() {
		// TODO Auto-generated method stub
		return null;
	}

	public class Node
	{  private T item;
	private Node next,previous;
	public Node() {}
	}
}

