import java.util.ArrayList;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class BasicDoubleLinkedList<T> implements java.lang.Iterable<T> {
	protected int size = 0;
	protected Node header, tail;

	public void addToEnd(T elem) {
		Node tmp = new Node(elem, null, tail);
		if (tail != null) {
			tail.next = tmp;
		}
		tail = tmp;
		if (header == null) {
			header = tmp;
		}
		size++;

	}

	public void addToFront(T elem) {

		Node tmp = new Node(elem, header, null);
		if (header != null) {
			header.previous = tmp;
		}
		header = tmp;
		if (tail == null) {
			tail = tmp;
		}
		size++;
	}

	public int getSize() {
		// TODO Auto-generated method stub
		return size;
	}

	public T getLast() {
		// TODO Auto-generated method stub
		return tail.item;
	}

	public T getFirst() {
		// TODO Auto-generated method stub
		return header.item;
	}

	public BasicDoubleLinkedList<T> remove(T elem, java.util.Comparator<T> comparator) {
		Node prev = null, curr = header;
		ListIterator<T> iterator1 = new iter();

		while (curr != null) {
			if (comparator.compare(curr.item, elem) == 0) {
				if (curr == header) {
					header = header.next;
					curr = header;
				} else if (curr == tail) {
					curr = null;
					tail = prev;
					prev.next = null;
				} else {
					prev.next = curr.next;
					curr = curr.next;
				}
				size--;
			} else {
				prev = curr;
				curr = curr.next;
			}
		}
		return this;
	}

	public T retrieveFirstElement() {
		if (size == 0) {
			throw new NoSuchElementException("Linked list is empty");
		}
		Node tmp = header;
		header = header.next;
		header.previous = null;
		size--;
		return tmp.item;
	}

	public T retrieveLastElement() {
		if (size == 0) {
			throw new NoSuchElementException("Linked list is empty");
		}
		Node tmp = tail;
		tail = tail.previous;
		tail.next = null;
		size--;
		return tmp.item;
	}

	public ArrayList<T> toArrayList() {
		ArrayList<T> temp = new ArrayList<T>();
		ListIterator<T> iterator1 = new iter();

		while (iterator1.hasNext()) {
			temp.add(iterator1.next());
		}
		return temp;
	}

	public ArrayList<T> toPArrayList() {
		
		
	}
	protected class Node {
		protected T item;
		protected Node next, previous;

		protected Node(T item, Node next, Node previous) {
			this.item = item;
			this.next = next;
			this.previous = previous;
		}
	}

	public class iter implements ListIterator<T> {
		private Node current;
		private int index = 0;

		public iter() {
			current = header;
		}

		public void reset() {
			current = header;
		}

		public boolean hasNext() {
			return index < size;
		}

		public T next()

		{
			if (hasNext()) {
				index++;
				Node temp = current;
				current = current.next;

				return temp.item;
			} else {
				throw new NoSuchElementException();
			}
		}

		public void set(T elem) {
			current.item = elem;
		}

		@Override
		public boolean hasPrevious() {
			return index > 0;

		}

		@Override
		public T previous() {
			if (!hasPrevious())
				throw new NoSuchElementException();
			current = current.previous;
			index--;
			return current.item;
		}

		@Override
		public int nextIndex() {
			throw new UnsupportedOperationException();
		}

		@Override
		public int previousIndex() {
			throw new UnsupportedOperationException();
		}

		@Override
		public void remove() {
			throw new UnsupportedOperationException();
		}

		@Override
		public void add(T e) {
			throw new UnsupportedOperationException();

		}

	}

	public ListIterator<T> iterator() {
		// TODO Auto-generated method stub
		return new iter();
	}

}
