// imports
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InvalidClassException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JOptionPane;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.Tooltip;

/** 
This application check the passwords given by the user string or txt file
@author Rajashow Parajuli
*/ 

public class PasswordCheckerUtility extends Application {
	public static void main(String[] args) {
		// Laughs the gui
		launch(args);

	
	}

	/**  
	 *  Check if the password is valid 
	 *   @return if the password is valid or not
	 *   @param the password as a string
	 *    @throws LengthException,NoDigitException,NoUpperAlphaException,NoLowerAlphaException,InvalidSequenceException
	 *    */ 
	public static boolean isValidPassword(String password) {

	

		// creating boolean conditions for a valid passwords
		boolean alpha, upper, lower;
		alpha = upper = lower = false;
		// creating modular min value
		int min = 6;
		// self length size statement
		if (password.length() < min) {
			// opens a Joption pane if password does not meet the min length of the password
			
			throw new LengthException(password);
		}
		// passing through the password to make sure all the requirement are met
		for (int i = 0; i < password.length(); i++) {
			if (Character.isUpperCase(password.charAt(i))) {

				upper = true;
			}
			if (Character.isLowerCase(password.charAt(i))) {

				lower = true;
			}
			if (Character.isDigit(password.charAt(i))) {

				alpha = true;
			}
			// after the first one
			if (i > 0) {
				// if found that current and previous letter are the same it causes and except.
				if (password.charAt(i) == password.charAt(i - 1)) {

					throw new InvalidSequenceException(password);
				}
			}
		}
		// Through expection based on requirements met or vice visa
		if (!alpha) {
			// System.out.println(!alpha+"11111");
			throw new NoDigitException(password);
		}
		if (!lower) {
			throw new NoLowerAlphaException(password);
		}
		if (!upper) {
			throw new NoUpperAlphaException(password);
		}
		return true;
	}

/**  
 *  Checks if length of password is between 5-10
 *   @return if the password is weak or not
 *   @param the password as a string
 *    */ 

public static boolean isWeakPassword(String password) {
	// password needs to less than or = to 10
	// System.out.println(password.length());
	return (password.length() < 10 && password.length() > 5);
}
	/**  
	 *  Checks a list of password are valid and returns an array list of invalid passwords
	 *   @return array of string that are not valid
	 *   @param the password as as array of strings 
	 *  @throws weakPassword Exception 
	 *    */ 
	public static ArrayList<String> validPasswords(ArrayList<String> passwords) {
		ArrayList<String> output = new ArrayList<String>();
		
		for(String password : passwords){
			// creating boolean conditions for a valid passwords
			boolean alpha, upper, lower;
			alpha = upper = lower = false;
			// creating modular min value
			int min = 6;
			// self length size 	statement
			if (password.length() < min) {
				// opens a Joption pane if password does not meet the min length of the password
				output.add(password+ " The password must be at least 6 characters long.");  
				break;
			}
			// passing through the password to make sure all the requirement are met
			for (int i = 0; i < password.length(); i++) {
				if (Character.isUpperCase(password.charAt(i))) {

					upper = true;
				}
				if (Character.isLowerCase(password.charAt(i))) {

					lower = true;
				}
				if (Character.isDigit(password.charAt(i))) {

					alpha = true;
				}
				// after the first one
				if (i > 0) {
					// if found that current and previous letter are the same it causes and except.
					if (password.charAt(i) == password.charAt(i - 1)) {
						output.add(password+"\" The password cannot contain more than two of the same character in sequence.");
						break;
					}
				}
			}
			// Through expection based on requirements met or vice visa
			if (!alpha) {
				// System.out.println(!alpha+"11111");
				 output.add(password+" The password must contain at least one digit."); 
					break;
			}
			if (!lower) {
				output.add(password+ " The password must contain at least one lowercase alphabetic character");
				break;
			}
			if (!upper) {
				output.add(password+ " The password must contain at least one uppercase alphabetic character");
				break;
			}
		
		}
		return output;
	}



	/**  
	 *  Runs the GUI elements and pass the user inputs to 
	 *    */ 
	@Override
	public void start(Stage stage) {
		ArrayList<String> passwords;
		String[] p = {"334455BB", "Im2cool4U", "george2ZZZ", "4sale", "bertha22", "4wardMarch", 
				"august30", "abcdef", "Applesxx", "aa11b", "pilotProject", "myPassword", 
				"myPassword2"};
		passwords = new ArrayList<String>();
		passwords.addAll(Arrays.asList(p));
	
		// requirements for the password to be valid
		String reqq = "1. At least 6 characters long;More than 10 characters is a strong password, between 6 and 10 characters is a weak (but acceptable) password \n2. At least 1 numeric character\n3. At least 1 uppercase alphabetic character	\n4. At least 1 lowercase alphabetic character	\n5. No more than 2 of the same character in a sequence\n";
		// creating the scene
		Scene scene = new Scene(new Group(), 600, 250);
		// creating the textfields
		TextField Password_F = new TextField();
		TextField Password_R = new TextField();

		Password_R.clear();
		Password_F.clear();

		Button check_pass = new Button();
		Button check_pass_file = new Button();
		Button quit = new Button();

		check_pass_file.setText("Check Password In The _File ");
		check_pass.setText("Check _Password");
		quit.setText("_Quit");

		quit.setTooltip(new Tooltip("Select to close the application"));
		check_pass.setTooltip(new Tooltip("Select to check the validity of the typed password"));
		check_pass_file.setTooltip(new Tooltip("Select to check the validity of the password in a file"));
	
		quit.setMnemonicParsing(true);
		check_pass.setMnemonicParsing(true);
		check_pass_file.setMnemonicParsing(true);

		// button pressed button
		quit.setOnAction(e -> stage.close());
		check_pass_file.setOnAction(e -> {
		System.out.println(validPasswords(passwords));
		});
		check_pass.setOnAction(e -> {
			String pF=Password_F.getText();
			String pR=Password_R.getText();
			if (pF.equals(pR)) {
				if (isValidPassword(pR)) {
					if (isWeakPassword(pR)) {

						throw new WeakPasswordException(pR);

					} else {
						JOptionPane.showMessageDialog(null, pR + " is a valid password.");
					}
				}

			} else {

				throw new UnmatchedException(pF,pR);
			}
		});

		// design elements of the gui
		VBox grid = new VBox(4);
		VBox labelBox = new VBox(4);
		VBox fieldBox = new VBox(4);
		HBox r1 = new HBox(2);
		HBox r2 = new HBox(2);
		HBox r3 = new HBox(2);

		labelBox.getChildren().add(new Label("Password:"));
		fieldBox.getChildren().add(Password_F); // y,x
		labelBox.getChildren().add(new Label("Re type Password:"));
		fieldBox.getChildren().add(Password_R);

		r1.getChildren().add(new Label(reqq));
		r2.getChildren().addAll(labelBox, fieldBox);
		r3.getChildren().add(check_pass);
		r3.getChildren().add(check_pass_file);
		r3.getChildren().add(quit);

		grid.getChildren().addAll(r1, r2, r3);

		Group root = (Group) scene.getRoot();
		root.getChildren().add(grid);
		stage.setScene(scene);
		stage.show();
	}

}